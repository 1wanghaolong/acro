stages:
  - build
  - alert_build
  - deploy
variables:
  PROD_IMAGE: "${CI_REGISTRY_ALIYUN_HK}/${CI_REGISTRY_ALIYUN_HK_NAMESPACE}/${APP_NAME}"
  DEV_IMAGE: "${CI_REGISTRY}/${CI_REGISTRY_NAMESPACE}/${APP_NAME}"
  IMAGE_TAG: "echo ${CI_COMMIT_TAG} |tr  '#' '-'"


cms_build_dev_docker:
  stage: build
  rules:
    - if: $CI_COMMIT_TAG =~ /.*dev/ && $CI_COMMIT_TAG =~ /.*cms.*/
      when: always
  script:
    - echo ${CI_REGISTRY_PASSWORD} | docker login ${CI_REGISTRY} -u ${CI_REGISTRY_USER} --password-stdin
    - IMAGE=${DEV_IMAGE}:`eval ${IMAGE_TAG}`
    - docker build  --build-arg BUILD_ENVIRONMENT=cms_dev -t ${IMAGE} .
    - docker push ${IMAGE}
  environment:
    name: dev

wealth_build_dev_docker:
  stage: build
  rules:
    - if: $CI_COMMIT_TAG =~ /.*dev/ && $CI_COMMIT_TAG =~ /.*wealth.*/
      when: always
  script:
    - echo ${CI_REGISTRY_PASSWORD} | docker login ${CI_REGISTRY} -u ${CI_REGISTRY_USER} --password-stdin
    - IMAGE=${DEV_IMAGE}:`eval ${IMAGE_TAG}`
    - docker build  --build-arg BUILD_ENVIRONMENT=wealth_dev -t ${IMAGE} .
    - docker push ${IMAGE}
  environment:
    name: dev

trs_build_dev_docker:
  stage: build
  rules:
    - if: $CI_COMMIT_TAG =~ /.*dev/ && $CI_COMMIT_TAG =~ /.*trs.*/
      when: always
  script:
    - echo ${CI_REGISTRY_PASSWORD} | docker login ${CI_REGISTRY} -u ${CI_REGISTRY_USER} --password-stdin
    - IMAGE=${DEV_IMAGE}:`eval ${IMAGE_TAG}`
    - docker build  --build-arg BUILD_ENVIRONMENT=trs_dev -t ${IMAGE} .
    - docker push ${IMAGE}
  environment:
    name: dev



cms_build_prod_docker:
  stage: build
  rules:
    - if: $CI_COMMIT_TAG =~ /master/ && $CI_COMMIT_TAG =~ /.*cms.*/
      when: always
  script:
    - echo ${CI_REGISTRY_ALIYUN_HK_PASSWORD} | docker login ${CI_REGISTRY_ALIYUN_HK} -u ${CI_REGISTRY_ALIYUN_HK_USER} --password-stdin
    - IMAGE=${PROD_IMAGE}:${PROJECT}-`eval ${IMAGE_TAG}`
    - docker build  --build-arg BUILD_ENVIRONMENT=cms_prod -t ${IMAGE} .
    - docker push ${IMAGE}
  environment:
    name: prod

wealth_build_prod_docker:
  stage: build
  rules:
    - if: $CI_COMMIT_TAG =~ /master/ && $CI_COMMIT_TAG =~ /.*wealth.*/
      when: always
  script:
    - echo ${CI_REGISTRY_ALIYUN_HK_PASSWORD} | docker login ${CI_REGISTRY_ALIYUN_HK} -u ${CI_REGISTRY_ALIYUN_HK_USER} --password-stdin
    - IMAGE=${PROD_IMAGE}:${PROJECT}-`eval ${IMAGE_TAG}`
    - docker build  --build-arg BUILD_ENVIRONMENT=wealth_prod -t ${IMAGE} .
    - docker push ${IMAGE}
  environment:
    name: prod

trs_build_prod_docker:
  stage: build
  rules:
    - if: $CI_COMMIT_TAG =~ /master/ && $CI_COMMIT_TAG =~ /.*trs.*/
      when: always
  script:
    - echo ${CI_REGISTRY_ALIYUN_HK_PASSWORD} | docker login ${CI_REGISTRY_ALIYUN_HK} -u ${CI_REGISTRY_ALIYUN_HK_USER} --password-stdin
    - IMAGE=${PROD_IMAGE}:${PROJECT}-`eval ${IMAGE_TAG}`
    - docker build  --build-arg BUILD_ENVIRONMENT=trs_prod -t ${IMAGE} .
    - docker push ${IMAGE}
  environment:
    name: prod



cms_dev_alert_fail_build:
  stage: alert_build
  rules:
    - if: $CI_COMMIT_TAG =~ /.*dev/ && $CI_COMMIT_TAG =~ /.*cms.*/
  environment:
    name: dev
  needs: ["cms_build_dev_docker"]
  when: on_failure
  script:
    - echo ${CI_COMMIT_MESSAGE} > test.${CI_PIPELINE_ID}.txt
    - 'curl -i -H "Accept: application/json"  -H "Content-Type:application/json" -X POST --data "{\"msg_type\":\"interactive\",\"card\":{\"config\":{\"wide_screen_mode\":true},\"header\":{\"title\":{\"tag\":\"plain_text\",\"content\":\"${ALERT_TITLE} DEV部署失败\"},\"template\":\"red\"},\"elements\":[{\"tag\":\"markdown\",\"content\":\"**CI_COMMIT_SHA:**${CI_COMMIT_SHA}\\n**CI_COMMIT_REF_NAME:** ${CI_COMMIT_REF_NAME}  \\n**CI_PIPELINE_ID:**${CI_PIPELINE_ID}  \\n**CI_PROJECT_ID:** ${CI_PROJECT_ID}  \\n**CI_PROJECT_PATH:**${CI_PROJECT_PATH}   \\n**CI_PROJECT_URL:** ${CI_PROJECT_URL}    \\n**CI_COMMIT_AUTHOR:**${CI_COMMIT_AUTHOR}\\n**CI_COMMIT_MESSAGE:** `head -1 test.${CI_PIPELINE_ID}.txt`\\n**GITLAB_USER_NAME:**${GITLAB_USER_NAME}\\n**CI_COMMIT_TAG:** ${CI_COMMIT_TAG}\\n**CI_REGISTRY_IMAGE:**${DEV_IMAGE}:`eval ${IMAGE_TAG}`\"}]}}" ${DEV_ALERT_WEBHOOK}'


wealth_dev_alert_fail_build:
  stage: alert_build
  rules:
    - if: $CI_COMMIT_TAG =~ /.*dev/ && $CI_COMMIT_TAG =~ /.*wealth.*/
  environment:
    name: dev
  needs: ["wealth_build_dev_docker"] 
  when: on_failure
  script:
    - echo ${CI_COMMIT_MESSAGE} > test.${CI_PIPELINE_ID}.txt
    - 'curl -i -H "Accept: application/json"  -H "Content-Type:application/json" -X POST --data "{\"msg_type\":\"interactive\",\"card\":{\"config\":{\"wide_screen_mode\":true},\"header\":{\"title\":{\"tag\":\"plain_text\",\"content\":\"${ALERT_TITLE} DEV部署失败\"},\"template\":\"red\"},\"elements\":[{\"tag\":\"markdown\",\"content\":\"**CI_COMMIT_SHA:**${CI_COMMIT_SHA}\\n**CI_COMMIT_REF_NAME:** ${CI_COMMIT_REF_NAME}  \\n**CI_PIPELINE_ID:**${CI_PIPELINE_ID}  \\n**CI_PROJECT_ID:** ${CI_PROJECT_ID}  \\n**CI_PROJECT_PATH:**${CI_PROJECT_PATH}   \\n**CI_PROJECT_URL:** ${CI_PROJECT_URL}    \\n**CI_COMMIT_AUTHOR:**${CI_COMMIT_AUTHOR}\\n**CI_COMMIT_MESSAGE:** `head -1 test.${CI_PIPELINE_ID}.txt`\\n**GITLAB_USER_NAME:**${GITLAB_USER_NAME}\\n**CI_COMMIT_TAG:** ${CI_COMMIT_TAG}\\n**CI_REGISTRY_IMAGE:**${DEV_IMAGE}:`eval ${IMAGE_TAG}`\"}]}}" ${DEV_ALERT_WEBHOOK}'

trs_dev_alert_fail_build:
  stage: alert_build
  rules:
    - if: $CI_COMMIT_TAG =~ /.*dev/ && $CI_COMMIT_TAG =~ /.*trs.*/
  environment:
    name: dev
  needs: ["trs_build_dev_docker"]
  when: on_failure
  script:
    - echo ${CI_COMMIT_MESSAGE} > test.${CI_PIPELINE_ID}.txt
    - 'curl -i -H "Accept: application/json"  -H "Content-Type:application/json" -X POST --data "{\"msg_type\":\"interactive\",\"card\":{\"config\":{\"wide_screen_mode\":true},\"header\":{\"title\":{\"tag\":\"plain_text\",\"content\":\"${ALERT_TITLE} DEV部署失败\"},\"template\":\"red\"},\"elements\":[{\"tag\":\"markdown\",\"content\":\"**CI_COMMIT_SHA:**${CI_COMMIT_SHA}\\n**CI_COMMIT_REF_NAME:** ${CI_COMMIT_REF_NAME}  \\n**CI_PIPELINE_ID:**${CI_PIPELINE_ID}  \\n**CI_PROJECT_ID:** ${CI_PROJECT_ID}  \\n**CI_PROJECT_PATH:**${CI_PROJECT_PATH}   \\n**CI_PROJECT_URL:** ${CI_PROJECT_URL}    \\n**CI_COMMIT_AUTHOR:**${CI_COMMIT_AUTHOR}\\n**CI_COMMIT_MESSAGE:** `head -1 test.${CI_PIPELINE_ID}.txt`\\n**GITLAB_USER_NAME:**${GITLAB_USER_NAME}\\n**CI_COMMIT_TAG:** ${CI_COMMIT_TAG}\\n**CI_REGISTRY_IMAGE:**${DEV_IMAGE}:`eval ${IMAGE_TAG}`\"}]}}" ${DEV_ALERT_WEBHOOK}'



cms_dev_alert_success_build:
  stage: alert_build
  rules:
    - if: $CI_COMMIT_TAG =~ /.*dev/ && $CI_COMMIT_TAG =~ /.*cms.*/
  environment:
    name: dev
  needs: ["cms_build_dev_docker"]
  when: on_success
  script:
    - echo ${CI_COMMIT_MESSAGE} > test.${CI_PIPELINE_ID}.txt
    - 'curl -i -H "Accept: application/json"  -H "Content-Type:application/json" -X POST --data "{\"msg_type\":\"interactive\",\"card\":{\"config\":{\"wide_screen_mode\":true},\"header\":{\"title\":{\"tag\":\"plain_text\",\"content\":\"${ALERT_TITLE} DEV部署成功\"},\"template\":\"green\"},\"elements\":[{\"tag\":\"markdown\",\"content\":\"**CI_COMMIT_SHA:** ${CI_COMMIT_SHA}\\n**CI_COMMIT_REF_NAME:** ${CI_COMMIT_REF_NAME}  \\n**CI_PIPELINE_ID:** ${CI_PIPELINE_ID}  \\n**CI_PROJECT_ID:** ${CI_PROJECT_ID}  \\n**CI_PROJECT_PATH:** ${CI_PROJECT_PATH}   \\n**CI_PROJECT_URL:** ${CI_PROJECT_URL}    \\n**CI_COMMIT_AUTHOR:** ${CI_COMMIT_AUTHOR}\\n**CI_COMMIT_MESSAGE:** `head -1 test.${CI_PIPELINE_ID}.txt `\\n**GITLAB_USER_NAME:** ${GITLAB_USER_NAME}\\n**CI_COMMIT_TAG:** ${CI_COMMIT_TAG}\\n**CI_REGISTRY_IMAGE:** ${DEV_IMAGE}:`eval ${IMAGE_TAG}`\"}]}}" ${DEV_ALERT_WEBHOOK}'

wealth_dev_alert_success_build:
  stage: alert_build
  rules:
    - if: $CI_COMMIT_TAG =~ /.*dev/ && $CI_COMMIT_TAG =~ /.*wealth.*/
  environment:
    name: dev
  needs: ["wealth_build_dev_docker"]
  when: on_success
  script:
    - echo ${CI_COMMIT_MESSAGE} > test.${CI_PIPELINE_ID}.txt
    - 'curl -i -H "Accept: application/json"  -H "Content-Type:application/json" -X POST --data "{\"msg_type\":\"interactive\",\"card\":{\"config\":{\"wide_screen_mode\":true},\"header\":{\"title\":{\"tag\":\"plain_text\",\"content\":\"${ALERT_TITLE} DEV部署成功\"},\"template\":\"green\"},\"elements\":[{\"tag\":\"markdown\",\"content\":\"**CI_COMMIT_SHA:** ${CI_COMMIT_SHA}\\n**CI_COMMIT_REF_NAME:** ${CI_COMMIT_REF_NAME}  \\n**CI_PIPELINE_ID:** ${CI_PIPELINE_ID}  \\n**CI_PROJECT_ID:** ${CI_PROJECT_ID}  \\n**CI_PROJECT_PATH:** ${CI_PROJECT_PATH}   \\n**CI_PROJECT_URL:** ${CI_PROJECT_URL}    \\n**CI_COMMIT_AUTHOR:** ${CI_COMMIT_AUTHOR}\\n**CI_COMMIT_MESSAGE:** `head -1 test.${CI_PIPELINE_ID}.txt `\\n**GITLAB_USER_NAME:** ${GITLAB_USER_NAME}\\n**CI_COMMIT_TAG:** ${CI_COMMIT_TAG}\\n**CI_REGISTRY_IMAGE:** ${DEV_IMAGE}:`eval ${IMAGE_TAG}`\"}]}}" ${DEV_ALERT_WEBHOOK}'

trs_dev_alert_success_build:
  stage: alert_build
  rules:
    - if: $CI_COMMIT_TAG =~ /.*dev/ && $CI_COMMIT_TAG =~ /.*trs.*/
  environment:
    name: dev
  needs: ["trs_build_dev_docker"]
  when: on_success
  script:
    - echo ${CI_COMMIT_MESSAGE} > test.${CI_PIPELINE_ID}.txt
    - 'curl -i -H "Accept: application/json"  -H "Content-Type:application/json" -X POST --data "{\"msg_type\":\"interactive\",\"card\":{\"config\":{\"wide_screen_mode\":true},\"header\":{\"title\":{\"tag\":\"plain_text\",\"content\":\"${ALERT_TITLE} DEV部署成功\"},\"template\":\"green\"},\"elements\":[{\"tag\":\"markdown\",\"content\":\"**CI_COMMIT_SHA:** ${CI_COMMIT_SHA}\\n**CI_COMMIT_REF_NAME:** ${CI_COMMIT_REF_NAME}  \\n**CI_PIPELINE_ID:** ${CI_PIPELINE_ID}  \\n**CI_PROJECT_ID:** ${CI_PROJECT_ID}  \\n**CI_PROJECT_PATH:** ${CI_PROJECT_PATH}   \\n**CI_PROJECT_URL:** ${CI_PROJECT_URL}    \\n**CI_COMMIT_AUTHOR:** ${CI_COMMIT_AUTHOR}\\n**CI_COMMIT_MESSAGE:** `head -1 test.${CI_PIPELINE_ID}.txt `\\n**GITLAB_USER_NAME:** ${GITLAB_USER_NAME}\\n**CI_COMMIT_TAG:** ${CI_COMMIT_TAG}\\n**CI_REGISTRY_IMAGE:** ${DEV_IMAGE}:`eval ${IMAGE_TAG}`\"}]}}" ${DEV_ALERT_WEBHOOK}'







cms_prod_alert_fail_build:
  stage: alert_build
  rules:
    - if: $CI_COMMIT_TAG =~ /master/ && $CI_COMMIT_TAG =~ /.*cms.*/
  environment:
    name: prod
  needs: ["cms_build_prod_docker"]
  when: on_failure
  script:
    - echo ${CI_COMMIT_MESSAGE} > test.${CI_PIPELINE_ID}.txt
    - 'curl -i -H "Accept: application/json"  -H "Content-Type:application/json" -X POST --data "{\"msg_type\":\"interactive\",\"card\":{\"config\":{\"wide_screen_mode\":true},\"header\":{\"title\":{\"tag\":\"plain_text\",\"content\":\"${ALERT_TITLE} PROD部署失败\"},\"template\":\"red\"},\"elements\":[{\"tag\":\"markdown\",\"content\":\"**CI_COMMIT_SHA:**${CI_COMMIT_SHA}\\n**CI_COMMIT_REF_NAME:**${CI_COMMIT_REF_NAME}  \\n**CI_PIPELINE_ID:**${CI_PIPELINE_ID}\\n**CI_PROJECT_ID:**${CI_PROJECT_ID}  \\n**CI_PROJECT_PATH:**${CI_PROJECT_PATH}\\n**CI_PROJECT_URL:**${CI_PROJECT_URL}    \\n**CI_COMMIT_AUTHOR:**${CI_COMMIT_AUTHOR}\\n**CI_COMMIT_MESSAGE:** `head -1 test.${CI_PIPELINE_ID}.txt `\\n**GITLAB_USER_NAME:**${GITLAB_USER_NAME}\\n**CI_COMMIT_TAG:** ${CI_COMMIT_TAG}\\n**CI_REGISTRY_IMAGE:**${PROD_IMAGE}\"}]}}" ${PROD_ALERT_WEBHOOK}'

wealth_prod_alert_fail_build:
  stage: alert_build
  rules:
    - if: $CI_COMMIT_TAG =~ /master/ && $CI_COMMIT_TAG =~ /.*wealth.*/
  environment:
    name: prod
  needs: ["wealth_build_prod_docker"]
  when: on_failure
  script:
    - echo ${CI_COMMIT_MESSAGE} > test.${CI_PIPELINE_ID}.txt
    - 'curl -i -H "Accept: application/json"  -H "Content-Type:application/json" -X POST --data "{\"msg_type\":\"interactive\",\"card\":{\"config\":{\"wide_screen_mode\":true},\"header\":{\"title\":{\"tag\":\"plain_text\",\"content\":\"${ALERT_TITLE} PROD部署失败\"},\"template\":\"red\"},\"elements\":[{\"tag\":\"markdown\",\"content\":\"**CI_COMMIT_SHA:**${CI_COMMIT_SHA}\\n**CI_COMMIT_REF_NAME:**${CI_COMMIT_REF_NAME}  \\n**CI_PIPELINE_ID:**${CI_PIPELINE_ID}\\n**CI_PROJECT_ID:**${CI_PROJECT_ID}  \\n**CI_PROJECT_PATH:**${CI_PROJECT_PATH}\\n**CI_PROJECT_URL:**${CI_PROJECT_URL}    \\n**CI_COMMIT_AUTHOR:**${CI_COMMIT_AUTHOR}\\n**CI_COMMIT_MESSAGE:** `head -1 test.${CI_PIPELINE_ID}.txt `\\n**GITLAB_USER_NAME:**${GITLAB_USER_NAME}\\n**CI_COMMIT_TAG:** ${CI_COMMIT_TAG}\\n**CI_REGISTRY_IMAGE:**${PROD_IMAGE}\"}]}}" ${PROD_ALERT_WEBHOOK}'

trs_prod_alert_fail_build:
  stage: alert_build
  rules:
    - if: $CI_COMMIT_TAG =~ /master/ && $CI_COMMIT_TAG =~ /.*trs.*/
  environment:
    name: prod
  needs: ["trs_build_prod_docker"]
  when: on_failure
  script:
    - echo ${CI_COMMIT_MESSAGE} > test.${CI_PIPELINE_ID}.txt
    - 'curl -i -H "Accept: application/json"  -H "Content-Type:application/json" -X POST --data "{\"msg_type\":\"interactive\",\"card\":{\"config\":{\"wide_screen_mode\":true},\"header\":{\"title\":{\"tag\":\"plain_text\",\"content\":\"${ALERT_TITLE} PROD部署失败\"},\"template\":\"red\"},\"elements\":[{\"tag\":\"markdown\",\"content\":\"**CI_COMMIT_SHA:**${CI_COMMIT_SHA}\\n**CI_COMMIT_REF_NAME:**${CI_COMMIT_REF_NAME}  \\n**CI_PIPELINE_ID:**${CI_PIPELINE_ID}\\n**CI_PROJECT_ID:**${CI_PROJECT_ID}  \\n**CI_PROJECT_PATH:**${CI_PROJECT_PATH}\\n**CI_PROJECT_URL:**${CI_PROJECT_URL}    \\n**CI_COMMIT_AUTHOR:**${CI_COMMIT_AUTHOR}\\n**CI_COMMIT_MESSAGE:** `head -1 test.${CI_PIPELINE_ID}.txt `\\n**GITLAB_USER_NAME:**${GITLAB_USER_NAME}\\n**CI_COMMIT_TAG:** ${CI_COMMIT_TAG}\\n**CI_REGISTRY_IMAGE:**${PROD_IMAGE}\"}]}}" ${PROD_ALERT_WEBHOOK}'



cms_prod_alert_success_build:
  stage: alert_build
  rules:
    - if: $CI_COMMIT_TAG =~ /master/ && $CI_COMMIT_TAG =~ /.*cms.*/
  environment:
    name: prod
  needs: ["cms_build_prod_docker"]
  when: on_success
  script:
    - echo ${CI_COMMIT_MESSAGE} > test.${CI_PIPELINE_ID}.txt
    - 'curl -i -H "Accept: application/json"  -H "Content-Type:application/json" -X POST --data "{\"msg_type\":\"interactive\",\"card\":{\"config\":{\"wide_screen_mode\":true},\"header\":{\"title\":{\"tag\":\"plain_text\",\"content\":\"${ALERT_TITLE} PROD部署成功\"},\"template\":\"green\"},\"elements\":[{\"tag\":\"markdown\",\"content\":\"**CI_COMMIT_SHA:**${CI_COMMIT_SHA}\\n**CI_COMMIT_REF_NAME:**${CI_COMMIT_REF_NAME}  \\n**CI_PIPELINE_ID:**${CI_PIPELINE_ID}\\n**CI_PROJECT_ID:**${CI_PROJECT_ID}  \\n**CI_PROJECT_PATH:**${CI_PROJECT_PATH}\\n**CI_PROJECT_URL:**${CI_PROJECT_URL}    \\n**CI_COMMIT_AUTHOR:**${CI_COMMIT_AUTHOR}\\n**CI_COMMIT_MESSAGE:** `head -1 test.${CI_PIPELINE_ID}.txt `\\n**GITLAB_USER_NAME:**${GITLAB_USER_NAME}\\n**CI_COMMIT_TAG:** ${CI_COMMIT_TAG}\\n**CI_REGISTRY_IMAGE:**${PROD_IMAGE}\"}]}}" ${PROD_ALERT_WEBHOOK}'

wealth_prod_alert_success_build:
  stage: alert_build
  rules:
    - if: $CI_COMMIT_TAG =~ /.*prod/ || $CI_COMMIT_TAG =~ /master/ || $CI_COMMIT_TAG =~ /main/ && $CI_COMMIT_TAG =~ /.*wealth.*/
  environment:
    name: prod
  needs: ["wealth_build_prod_docker"]
  when: on_success
  script:
    - echo ${CI_COMMIT_MESSAGE} > test.${CI_PIPELINE_ID}.txt
    - 'curl -i -H "Accept: application/json"  -H "Content-Type:application/json" -X POST --data "{\"msg_type\":\"interactive\",\"card\":{\"config\":{\"wide_screen_mode\":true},\"header\":{\"title\":{\"tag\":\"plain_text\",\"content\":\"${ALERT_TITLE} PROD部署成功\"},\"template\":\"green\"},\"elements\":[{\"tag\":\"markdown\",\"content\":\"**CI_COMMIT_SHA:**${CI_COMMIT_SHA}\\n**CI_COMMIT_REF_NAME:**${CI_COMMIT_REF_NAME}  \\n**CI_PIPELINE_ID:**${CI_PIPELINE_ID}\\n**CI_PROJECT_ID:**${CI_PROJECT_ID}  \\n**CI_PROJECT_PATH:**${CI_PROJECT_PATH}\\n**CI_PROJECT_URL:**${CI_PROJECT_URL}    \\n**CI_COMMIT_AUTHOR:**${CI_COMMIT_AUTHOR}\\n**CI_COMMIT_MESSAGE:** `head -1 test.${CI_PIPELINE_ID}.txt `\\n**GITLAB_USER_NAME:**${GITLAB_USER_NAME}\\n**CI_COMMIT_TAG:** ${CI_COMMIT_TAG}\\n**CI_REGISTRY_IMAGE:**${PROD_IMAGE}\"}]}}" ${PROD_ALERT_WEBHOOK}'


trs_prod_alert_success_build:
  stage: alert_build
  rules:
    - if: $CI_COMMIT_TAG =~ /master/ && $CI_COMMIT_TAG =~ /.*trs.*/
  environment:
    name: prod
  needs: ["trs_build_prod_docker"]
  when: on_success
  script:
    - echo ${CI_COMMIT_MESSAGE} > test.${CI_PIPELINE_ID}.txt
    - 'curl -i -H "Accept: application/json"  -H "Content-Type:application/json" -X POST --data "{\"msg_type\":\"interactive\",\"card\":{\"config\":{\"wide_screen_mode\":true},\"header\":{\"title\":{\"tag\":\"plain_text\",\"content\":\"${ALERT_TITLE} PROD部署成功\"},\"template\":\"green\"},\"elements\":[{\"tag\":\"markdown\",\"content\":\"**CI_COMMIT_SHA:**${CI_COMMIT_SHA}\\n**CI_COMMIT_REF_NAME:**${CI_COMMIT_REF_NAME}  \\n**CI_PIPELINE_ID:**${CI_PIPELINE_ID}\\n**CI_PROJECT_ID:**${CI_PROJECT_ID}  \\n**CI_PROJECT_PATH:**${CI_PROJECT_PATH}\\n**CI_PROJECT_URL:**${CI_PROJECT_URL}    \\n**CI_COMMIT_AUTHOR:**${CI_COMMIT_AUTHOR}\\n**CI_COMMIT_MESSAGE:** `head -1 test.${CI_PIPELINE_ID}.txt `\\n**GITLAB_USER_NAME:**${GITLAB_USER_NAME}\\n**CI_COMMIT_TAG:** ${CI_COMMIT_TAG}\\n**CI_REGISTRY_IMAGE:**${PROD_IMAGE}\"}]}}" ${PROD_ALERT_WEBHOOK}'








cms_deploy_dev:
  stage: deploy
  rules:
    - if: $CI_COMMIT_TAG =~ /.*dev/ && $CI_COMMIT_TAG =~ /.*cms.*/
      when: on_success
  needs: ["cms_build_dev_docker"]
  script:
    - cd manifests/${CI_ENVIRONMENT_SLUG}/
    - sed -i "s/__CI_ENVIRONMENT_SLUG__/${CI_ENVIRONMENT_SLUG}/" cms.yaml
    - sed -i "s/__TAG__/`eval ${IMAGE_TAG}`/" cms.yaml
    - sed -i "s@__IMAGE__@${DEV_IMAGE}@" cms.yaml
    - sed -i "s@__DEV_NAMESPACE__@${DEV_NAMESPACE}@" cms.yaml
    - kubectl --kubeconfig ${CD_KUBE_DEV_CONFIG} apply -f cms.yaml
    - kubectl --kubeconfig ${CD_KUBE_DEV_CONFIG} rollout status -f cms.yaml
  environment:
    name: dev

wealth_deploy_dev:
  stage: deploy
  rules:
    - if: $CI_COMMIT_TAG =~ /.*dev/ && $CI_COMMIT_TAG =~ /.*wealth.*/
      when: on_success
  needs: ["wealth_build_dev_docker"]
  script:
    - cd manifests/${CI_ENVIRONMENT_SLUG}/
    - sed -i "s/__CI_ENVIRONMENT_SLUG__/${CI_ENVIRONMENT_SLUG}/" wealth.yaml
    - sed -i "s/__TAG__/`eval ${IMAGE_TAG}`/" wealth.yaml
    - sed -i "s@__IMAGE__@${DEV_IMAGE}@" wealth.yaml
    - sed -i "s@__DEV_NAMESPACE__@${DEV_NAMESPACE}@" wealth.yaml
    - kubectl --kubeconfig ${CD_KUBE_DEV_CONFIG} apply -f wealth.yaml
    - kubectl --kubeconfig ${CD_KUBE_DEV_CONFIG} rollout status -f wealth.yaml
  environment:
    name: dev

trs_deploy_dev:
  stage: deploy
  rules:
    - if: $CI_COMMIT_TAG =~ /.*dev/ && $CI_COMMIT_TAG =~ /.*trs.*/
      when: on_success
  needs: ["trs_build_dev_docker"]
  script:
    - cd manifests/${CI_ENVIRONMENT_SLUG}/
    - sed -i "s/__CI_ENVIRONMENT_SLUG__/${CI_ENVIRONMENT_SLUG}/" trs.yaml
    - sed -i "s/__TAG__/`eval ${IMAGE_TAG}`/" trs.yaml
    - sed -i "s@__IMAGE__@${DEV_IMAGE}@" trs.yaml
    - sed -i "s@__DEV_NAMESPACE__@${DEV_NAMESPACE}@" trs.yaml
    - kubectl --kubeconfig ${CD_KUBE_DEV_CONFIG} apply -f trs.yaml
    - kubectl --kubeconfig ${CD_KUBE_DEV_CONFIG} rollout status -f trs.yaml
  environment:
    name: dev

cms_deploy_prod:
  stage: deploy
  rules:
    - if: $CI_COMMIT_TAG =~ /master/ && $CI_COMMIT_TAG =~ /.*cms.*/
      when: manual
  needs: ["cms_build_prod_docker"]
  script:
    - cd manifests/${CI_ENVIRONMENT_SLUG}/
    - sed -i "s/__CI_ENVIRONMENT_SLUG__/${CI_ENVIRONMENT_SLUG}/" cms.yaml
    - sed -i "s/__TAG__/${PROJECT}-`eval ${IMAGE_TAG}`/" cms.yaml
    - sed -i "s@__IMAGE__@${PROD_IMAGE}@" cms.yaml
    - sed -i "s@__PROD_NAMESPACE__@${PROD_NAMESPACE}@" cms.yaml
    - kubectl --kubeconfig ${CD_KUBE_PROD_CONFIG} apply -f cms.yaml
    - kubectl --kubeconfig ${CD_KUBE_PROD_CONFIG} rollout status -f cms.yaml
  environment:
    name: prod

wealth_deploy_prod:
  stage: deploy
  rules:
    - if: $CI_COMMIT_TAG =~ /master/ && $CI_COMMIT_TAG =~ /.*wealth.*/
      when: manual
  needs: ["wealth_build_prod_docker"]
  script:
    - cd manifests/${CI_ENVIRONMENT_SLUG}/
    - sed -i "s/__CI_ENVIRONMENT_SLUG__/${CI_ENVIRONMENT_SLUG}/" wealth.yaml
    - sed -i "s/__TAG__/${PROJECT}-`eval ${IMAGE_TAG}`/" wealth.yaml
    - sed -i "s@__IMAGE__@${PROD_IMAGE}@" wealth.yaml
    - sed -i "s@__PROD_NAMESPACE__@${PROD_NAMESPACE}@" wealth.yaml
    - kubectl --kubeconfig ${CD_KUBE_PROD_CONFIG} apply -f wealth.yaml
    - kubectl --kubeconfig ${CD_KUBE_PROD_CONFIG} rollout status -f wealth.yaml
  environment:
    name: prod

trs_deploy_prod:
  stage: deploy
  rules:
    - if: $CI_COMMIT_TAG =~ /master/ && $CI_COMMIT_TAG =~ /.*trs.*/
      when: manual
  needs: ["trs_build_prod_docker"]
  script:
    - cd manifests/${CI_ENVIRONMENT_SLUG}/
    - sed -i "s/__CI_ENVIRONMENT_SLUG__/${CI_ENVIRONMENT_SLUG}/" trs.yaml
    - sed -i "s/__TAG__/${PROJECT}-`eval ${IMAGE_TAG}`/" trs.yaml
    - sed -i "s@__IMAGE__@${PROD_IMAGE}@" trs.yaml
    - sed -i "s@__PROD_NAMESPACE__@${PROD_NAMESPACE}@" trs.yaml
    - kubectl --kubeconfig ${CD_KUBE_PROD_CONFIG} apply -f trs.yaml
    - kubectl --kubeconfig ${CD_KUBE_PROD_CONFIG} rollout status -f trs.yaml
  environment:
    name: prod